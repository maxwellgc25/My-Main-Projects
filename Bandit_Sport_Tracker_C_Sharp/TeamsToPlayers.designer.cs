#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace group_project_i_brownie_bandits
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlayerLits")]
	public partial class TeamsToPlayersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    #endregion
		
		public TeamsToPlayersDataContext() : 
				base(global::group_project_i_brownie_bandits.Properties.Settings.Default.PlayerLitsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TeamsToPlayersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamsToPlayersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamsToPlayersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamsToPlayersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TeamName;
		
		private string _TeamDvision;
		
		private string _TeamLocation;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamDvisionChanging(string value);
    partial void OnTeamDvisionChanged();
    partial void OnTeamLocationChanging(string value);
    partial void OnTeamLocationChanged();
    #endregion
		
		public Team()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamDvision", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamDvision
		{
			get
			{
				return this._TeamDvision;
			}
			set
			{
				if ((this._TeamDvision != value))
				{
					this.OnTeamDvisionChanging(value);
					this.SendPropertyChanging();
					this._TeamDvision = value;
					this.SendPropertyChanged("TeamDvision");
					this.OnTeamDvisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamLocation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamLocation
		{
			get
			{
				return this._TeamLocation;
			}
			set
			{
				if ((this._TeamLocation != value))
				{
					this.OnTeamLocationChanging(value);
					this.SendPropertyChanging();
					this._TeamLocation = value;
					this.SendPropertyChanged("TeamLocation");
					this.OnTeamLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="TeamName", OtherKey="TeamName")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _PlayerName;
		
		private string _TeamName;
		
		private string _Position;
		
		private int _GamesPlayed;
		
		private int _Goals;
		
		private int _Assists;
		
		private int _Points;
		
		private string _Plus_Minus;
		
		private int _PenialtyMinutes;
		
		private int _PowerPlayGoals;
		
		private int _ShorthandedGoals;
		
		private int _GameWinningGoals;
		
		private int _OvertimeGoals;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnGamesPlayedChanging(int value);
    partial void OnGamesPlayedChanged();
    partial void OnGoalsChanging(int value);
    partial void OnGoalsChanged();
    partial void OnAssistsChanging(int value);
    partial void OnAssistsChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnPlus_MinusChanging(string value);
    partial void OnPlus_MinusChanged();
    partial void OnPenialtyMinutesChanging(int value);
    partial void OnPenialtyMinutesChanged();
    partial void OnPowerPlayGoalsChanging(int value);
    partial void OnPowerPlayGoalsChanged();
    partial void OnShorthandedGoalsChanging(int value);
    partial void OnShorthandedGoalsChanged();
    partial void OnGameWinningGoalsChanging(int value);
    partial void OnGameWinningGoalsChanged();
    partial void OnOvertimeGoalsChanging(int value);
    partial void OnOvertimeGoalsChanged();
    #endregion
		
		public Player()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamesPlayed", DbType="Int NOT NULL")]
		public int GamesPlayed
		{
			get
			{
				return this._GamesPlayed;
			}
			set
			{
				if ((this._GamesPlayed != value))
				{
					this.OnGamesPlayedChanging(value);
					this.SendPropertyChanging();
					this._GamesPlayed = value;
					this.SendPropertyChanged("GamesPlayed");
					this.OnGamesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="Int NOT NULL")]
		public int Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="Int NOT NULL")]
		public int Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int NOT NULL")]
		public int Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Plus-Minus]", Storage="_Plus_Minus", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Plus_Minus
		{
			get
			{
				return this._Plus_Minus;
			}
			set
			{
				if ((this._Plus_Minus != value))
				{
					this.OnPlus_MinusChanging(value);
					this.SendPropertyChanging();
					this._Plus_Minus = value;
					this.SendPropertyChanged("Plus_Minus");
					this.OnPlus_MinusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PenialtyMinutes", DbType="Int NOT NULL")]
		public int PenialtyMinutes
		{
			get
			{
				return this._PenialtyMinutes;
			}
			set
			{
				if ((this._PenialtyMinutes != value))
				{
					this.OnPenialtyMinutesChanging(value);
					this.SendPropertyChanging();
					this._PenialtyMinutes = value;
					this.SendPropertyChanged("PenialtyMinutes");
					this.OnPenialtyMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerPlayGoals", DbType="Int NOT NULL")]
		public int PowerPlayGoals
		{
			get
			{
				return this._PowerPlayGoals;
			}
			set
			{
				if ((this._PowerPlayGoals != value))
				{
					this.OnPowerPlayGoalsChanging(value);
					this.SendPropertyChanging();
					this._PowerPlayGoals = value;
					this.SendPropertyChanged("PowerPlayGoals");
					this.OnPowerPlayGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShorthandedGoals", DbType="Int NOT NULL")]
		public int ShorthandedGoals
		{
			get
			{
				return this._ShorthandedGoals;
			}
			set
			{
				if ((this._ShorthandedGoals != value))
				{
					this.OnShorthandedGoalsChanging(value);
					this.SendPropertyChanging();
					this._ShorthandedGoals = value;
					this.SendPropertyChanged("ShorthandedGoals");
					this.OnShorthandedGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameWinningGoals", DbType="Int NOT NULL")]
		public int GameWinningGoals
		{
			get
			{
				return this._GameWinningGoals;
			}
			set
			{
				if ((this._GameWinningGoals != value))
				{
					this.OnGameWinningGoalsChanging(value);
					this.SendPropertyChanging();
					this._GameWinningGoals = value;
					this.SendPropertyChanged("GameWinningGoals");
					this.OnGameWinningGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OvertimeGoals", DbType="Int NOT NULL")]
		public int OvertimeGoals
		{
			get
			{
				return this._OvertimeGoals;
			}
			set
			{
				if ((this._OvertimeGoals != value))
				{
					this.OnOvertimeGoalsChanging(value);
					this.SendPropertyChanging();
					this._OvertimeGoals = value;
					this.SendPropertyChanged("OvertimeGoals");
					this.OnOvertimeGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="TeamName", OtherKey="TeamName", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._TeamName = value.TeamName;
					}
					else
					{
						this._TeamName = default(string);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
